"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6285],{7237:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return u},default:function(){return x}});var s=n(5773),i=n(808),o=(n(7378),n(5318)),r=n(8239),m=n(9571),a=["components"],c={title:"sort ()",hide_title:!0,hide_table_of_contents:!0},p=void 0,l={unversionedId:"api/list/sort",id:"api/list/sort",isDocsHomePage:!1,title:"sort ()",description:"Read more on comparison logic for a detailed explanation on sorting methods.",source:"@site/docs/api/list/sort.mdx",sourceDirName:"api/list",slug:"/api/list/sort",permalink:"/api/list/sort",editUrl:"https://github.com/roydukkey/sass-fairy/edit/master/website/docs/api/list/sort.mdx",tags:[],version:"current",frontMatter:{title:"sort ()",hide_title:!0,hide_table_of_contents:!0},sidebar:"listSidebar",previous:{title:"some ()",permalink:"/api/list/some"},next:{title:"to-string ()",permalink:"/api/list/to-string"}},u=[],d={toc:u};function x(t){var e=t.components,n=(0,i.Z)(t,a);return(0,o.kt)("wrapper",(0,s.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)(r.Z,{fieldName:"sort",fieldType:"function",spec:m.ZP,mdxType:"DocPage"},(0,o.kt)("p",null,"Read more on ",(0,o.kt)("a",{parentName:"p",href:"/docs/compare-logic"},"comparison logic")," for a detailed explanation on sorting methods.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scss"},"@use '@sass-fairy/list';\n\n// 1. Sorting as strings\n$list: 'Three' 'Two' 'Five' 'Six' 'Four' 'One';\n\n@debug list.sort($list);\n  // 'Five' 'Four' 'One' 'Six' 'Three' 'Two'\n\n@debug list.sort($list, list.compare-string());\n  // 'Five' 'Four' 'One' 'Six' 'Three' 'Two'\n\n@debug list.sort($list, list.compare-string-desc());\n  // 'Two' 'Three' 'Six' 'One' 'Four' 'Five'\n\n// 2. Sorting as numbers (Automatic)\n$unsorted: 6mm 2px 4em 20mm -9mm 2cm 25px 1.25cm -4px 1 -3cm;\n\n$sorted: list.sort($unsorted, list.compare-numeric());\n\n@debug $sorted;\n  // -3cm -9mm -4px 2px 1 4em 6mm 25px 1.25cm 2cm 20mm\n\n@debug list.sort($sorted, list.compare-numeric());\n  // -3cm -9mm -4px 2px 6mm 25px 1 1.25cm 20mm 2cm 4em\n\n// 3. Sorting as numbers (Certain)\n$sorted: list.sort($unsorted, list.compare-numeric(), 0cm);\n\n@debug $sorted;\n  // -3cm -9mm -4px 2px 6mm 25px 1 1.25cm 20mm 2cm 4em\n\n@debug list.sort($sorted, list.compare-numeric(), 0mm);\n  // -3cm -9mm -4px 2px 1 4em 6mm 25px 1.25cm 2cm 20mm\n\n@debug list.sort($sorted, list.compare-numeric(), 0);\n  // -9mm -4px -3cm 1 1.25cm 2cm 2px 4em 6mm 20mm 25px\n")))}x.isMDXComponent=!0}}]);