"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4515],{6138:function(e,t,r){var n=r(2799),i=r(7378),a=r(7017);t.Z=function(){return i.createElement(n.Z,{spec:a.Z})}},7017:function(e,t,r){r.d(t,{Z:function(){return n}});var n={module:"meta",description:JSON.parse('{"WL":"Provides extended functionality for handling Sass\u2019s inner workings"}').WL,basePath:"/api/meta",functions:{"call-or-reference":{group:"main",description:"Allows a function to return its reference when no parameters are provided, otherwise maintaining its regular behavior.",parameters:{function:{description:"The function to call or reference.",type:["Function"]},args:{description:"The arguments to apply to the invocation of the function.",type:["ArgList"]}},return:{description:"The given function is returned when no arguments are given; otherwise, supplied with the given arguments, the value returned by the invocation of the given function is returned.",type:["Function","*"]}},"get-keyword":{group:"main",description:"Gets the value of the named parameter from the given argument list, otherwise providing a default value.",parameters:{args:{description:"The argument list from which to get the named parameter.",type:["!ArgList"]},name:{description:"The name of the parameter to get.",type:["String"]},default:{description:"The value of the parameter when not contained in the argument list.",type:["*"],defaultValue:"null"}},return:{description:"The value of the named parameter when it exists; otherwise, the given default value.",type:["*"]}},"strip-keywords":{group:"main",description:"Strips all named parameters from the given argument list.",parameters:{args:{description:"The argument list from which to strip all named parameters.",type:["!ArgList"]}},return:{description:"Returns the values of an argument list without named parameters.",type:["List"]}}}}},1206:function(e,t,r){r.d(t,{ZP:function(){return p}});var n=r(5773),i=r(808),a=(r(7378),r(5318)),s=["components"],o={toc:[]};function p(e){var t=e.components,r=(0,i.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},o,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scss"},"@use 'sass:list';\n@use '@sass-fairy/meta';\n\n// 1. Extend `list.zip($list...)` to include `$bracketed` parameter.\n@function zip-it($list...) {\n  $bracketed: meta.get-keyword($list, 'bracketed', auto);\n\n  // Keywords must be stripped, otherwise\n  // they will spread to `list.zip()` where the are not accepted.\n  $list: meta.strip-keywords($list);\n  $list: list.zip($list...);\n\n  @return list.join($list, (), $bracketed: $bracketed);\n}\n\n// 2. Consuming the extended function\n@debug zip-it(10px 50px 100px, short mid long, $bracketed: true);\n  // [10px short, 50px mid, 100px long]\n")))}p.isMDXComponent=!0},5800:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return d},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return m},default:function(){return h}});var n=r(5773),i=r(808),a=(r(7378),r(5318)),s=r(6138),o=r(1206),p=["components"],d={title:"strip-keywords ()",module:"meta",sidebar_label:"strip-keywords",sidebar_class_name:"function",hide_table_of_contents:!0},u=void 0,c={unversionedId:"api/meta/strip-keywords",id:"api/meta/strip-keywords",title:"strip-keywords ()",description:"",source:"@site/docs/api/meta/strip-keywords.mdx",sourceDirName:"api/meta",slug:"/api/meta/strip-keywords",permalink:"/api/meta/strip-keywords",editUrl:"https://github.com/roydukkey/sass-fairy/edit/master/website/docs/api/meta/strip-keywords.mdx",tags:[],version:"current",frontMatter:{title:"strip-keywords ()",module:"meta",sidebar_label:"strip-keywords",sidebar_class_name:"function",hide_table_of_contents:!0},sidebar:"metaSidebar",previous:{title:"get-keyword",permalink:"/api/meta/get-keyword"}},m=[],l={toc:m};function h(e){var t=e.components,r=(0,i.Z)(e,p);return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(s.Z,{mdxType:"FieldDetails"}),(0,a.kt)(o.ZP,{mdxType:"Example"}))}h.isMDXComponent=!0}}]);